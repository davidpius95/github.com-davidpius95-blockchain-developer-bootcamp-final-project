{"version":3,"sources":["components/Loading/loading.gif","components/ConnectMetamask/metamask.svg","components/Navbar/favicon.ico","components/AllCryptoBoys/favicon.ico","components/CryptoBoyNFTImage/CryptoBoyNFTImage.jsx","components/FormAndPreview/FormAndPreview.jsx","components/CryptoBoyNFTDetails/CryptoBoyNFTDetails.jsx","components/AllCryptoBoys/nftimage.js","components/AllCryptoBoys/AllCryptoBoys.jsx","components/ContractNotDeployed/ContractNotDeployed.jsx","components/ConnectMetamask/ConnectToMetamask.jsx","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CryptoBoyNFTImage","_ref","colors","cardBorderColor","cardBackgroundColor","headBorderColor","headBackgroundColor","leftEyeBorderColor","rightEyeBorderColor","leftEyeBackgroundColor","rightEyeBackgroundColor","leftPupilBackgroundColor","rightPupilBackgroundColor","mouthColor","neckBackgroundColor","neckBorderColor","bodyBackgroundColor","bodyBorderColor","cryptoboy_card","width","height","margin","backgroundColor","concat","border","head","zIndex","borderRadius","position","eyeLeft","top","left","eyeRight","pupilLeft","pupilRight","mouth","right","borderBottom","neck","body","leftHand","borderRight","rightHand","react_default","a","createElement","style","Component","CryptoBoyNFTDetails","props","_this","Object","classCallCheck","this","_super","call","callChangeTokenPriceFromApp","tokenId","newPrice","changeTokenPrice","state","newCryptoBoyPrice","_this2","key","cryptoboy","toNumber","className","accountAddress","currentOwner","onSubmit","e","preventDefault","htmlFor","required","type","name","id","value","placeholder","onChange","setState","target","fontSize","letterSpacing","forSale","onClick","toggleForSale","price","buyCryptoBoy","Fragment","images","AllCryptoBoys","cryptoBoys","totalTokensMinted","_useState","useState","_useState2","slicedToArray","NavHomeButton","styled","button","_templateObject","taggedTemplateLiteral","console","log","length","href","color","map","src","image","indexOf","alt","components_CryptoBoyNFTDetails_CryptoBoyNFTDetails","ContractNotDeployed","ConnectToMetamask","connectToMetamask","metamaskIcon","marginLeft","ipfs","require","ipfsClient","host","port","protocol","App","componentWillMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","loadWeb3","loadBlockchainData","setMetaData","setMintBtnTimer","stop","mintBtn","document","getElementById","undefined","lastMintTime","localStorage","getItem","innerHTML","checkIfCanMint","parseInt","countDownTime","interval","setInterval","now","Date","getTime","diff","removeAttribute","removeItem","clearInterval","minutes","Math","floor","seconds","setAttribute","_callee2","_context2","window","ethereum","web3","Web3","currentProvider","alert","_callee3","accounts","accountBalance","networkId","networkData","cryptoBoysContract","cryptoBoysCount","i","cryptoBoy","totalTokensOwnedByAccount","_context3","eth","getAccounts","sent","metamaskConnected","loading","getBalance","utils","fromWei","net","getId","CryptoBoys","networks","Contract","abi","address","contractDetected","methods","cryptoBoyCounter","allCryptoBoys","toConsumableArray","getNumberOfTokensMinted","getTotalNumberOfTokensOwnedByAnAddress","_callee4","_context4","enable","location","reload","_callee6","_context6","_ref6","_callee5","result","metaData","_context5","fetch","tokenURI","json","Number","objectSpread","_x","apply","arguments","mintMyNFT","_ref7","_callee7","tokenPrice","colorsArray","colorsUsed","nameIsUsed","previousTokenId","tokenObject","cid","_context7","values","colorExists","abrupt","tokenNameExists","tokenName","tokenSymbol","add","JSON","stringify","path","toWei","toString","mintCryptoBoy","send","from","on","setItem","colorIsUsed","_x2","_x3","_x4","newTokenPrice","buyToken","react_router_dom","basename","react_router","render","components_AllCryptoBoys_AllCryptoBoys","components_ContractNotDeployed_ContractNotDeployed","ConnectMetamask_ConnectToMetamask","Boolean","hostname","match","ReactDOM","StrictMode","src_components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0fac168f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.26ef8bb4.gif\";","module.exports = __webpack_public_path__ + \"static/media/metamask.fbf33967.svg\";","module.exports = __webpack_public_path__ + \"static/media/favicon.416ea832.ico\";","module.exports = __webpack_public_path__ + \"static/media/favicon.416ea832.ico\";","import React from \"react\";\n\nconst CryptoBoyNFTImage = ({ colors }) => {\n  const {\n    cardBorderColor,\n    cardBackgroundColor,\n    headBorderColor,\n    headBackgroundColor,\n    leftEyeBorderColor,\n    rightEyeBorderColor,\n    leftEyeBackgroundColor,\n    rightEyeBackgroundColor,\n    leftPupilBackgroundColor,\n    rightPupilBackgroundColor,\n    mouthColor,\n    neckBackgroundColor,\n    neckBorderColor,\n    bodyBackgroundColor,\n    bodyBorderColor,\n  } = colors;\n\n  const cryptoboy_card = {\n    width: \"280px\",\n    height: \"260px\",\n    margin: \"auto\",\n    backgroundColor: `${cardBackgroundColor}`,\n    border: `10px solid ${cardBorderColor}`,\n  };\n\n  const head = {\n    zIndex: \"1\",\n    width: \"100px\",\n    height: \"100px\",\n    borderRadius: \"50%\",\n    margin: \"2rem auto 0\",\n    border: `8px solid ${headBorderColor}`,\n    backgroundColor: `${headBackgroundColor}`,\n    position: \"relative\",\n  };\n\n  const eyeLeft = {\n    zIndex: \"1\",\n    width: \"60px\",\n    height: \"60px\",\n    backgroundColor: `${leftEyeBackgroundColor}`,\n    borderRadius: \"50%\",\n    position: \"absolute\",\n    top: \"0rem\",\n    left: \"-1.5rem\",\n    border: `6px solid ${leftEyeBorderColor}`,\n  };\n\n  const eyeRight = {\n    zIndex: \"1\",\n    width: \"70px\",\n    height: \"70px\",\n    backgroundColor: `${rightEyeBackgroundColor}`,\n    borderRadius: \"50%\",\n    position: \"absolute\",\n    top: \"-1.2rem\",\n    left: \"2.8rem\",\n    border: `6px solid ${rightEyeBorderColor}`,\n  };\n\n  const pupilLeft = {\n    width: \"20px\",\n    height: \"20px\",\n    backgroundColor: `${leftPupilBackgroundColor}`,\n    borderRadius: \"50%\",\n    position: \"absolute\",\n    left: \"1rem\",\n    top: \"1rem\",\n  };\n\n  const pupilRight = {\n    width: \"30px\",\n    height: \"30px\",\n    backgroundColor: `${rightPupilBackgroundColor}`,\n    borderRadius: \"50%\",\n    position: \"absolute\",\n    left: \"1rem\",\n    top: \"1rem\",\n  };\n\n  const mouth = {\n    position: \"absolute\",\n    top: \"12px\",\n    left: \"0\",\n    right: \"0\",\n    height: \"60px\",\n    width: \"60px\",\n    margin: \"3px auto\",\n    borderRadius: \"100%\",\n    borderBottom: `8px solid ${mouthColor}`,\n  };\n\n  const neck = {\n    position: \"relative\",\n    left: \"7.7rem\",\n    top: \"-0.1rem\",\n    width: \"15px\",\n    height: \"30px\",\n    backgroundColor: `${neckBackgroundColor}`,\n    border: `4px solid ${neckBorderColor}`,\n  };\n\n  const body = {\n    height: \"50px\",\n    width: \"90px\",\n    margin: \"-0.4rem auto\",\n    border: `5px solid ${bodyBorderColor}`,\n    borderRadius: \"100% 100% 100% 100% / 100% 100% 0% 0%\",\n    backgroundColor: `${bodyBackgroundColor}`,\n    position: \"relative\",\n    left: \"0.1rem\",\n  };\n\n  const leftHand = {\n    position: \"absolute\",\n    top: \"20px\",\n    width: \"15px\",\n    height: \"20px\",\n    borderRight: `5px solid ${bodyBorderColor}`,\n  };\n\n  const rightHand = {\n    position: \"absolute\",\n    top: \"20px\",\n    width: \"15px\",\n    height: \"20px\",\n    borderRight: `5px solid ${bodyBorderColor}`,\n    right: \"1rem\",\n  };\n\n  return (\n    <div style={cryptoboy_card}>\n      <div style={head}>\n        <div style={eyeLeft}>\n          <div style={pupilLeft}></div>\n        </div>\n        <div style={eyeRight}>\n          <div style={pupilRight}></div>\n        </div>\n        <div style={mouth}></div>\n      </div>\n      <div style={neck}></div>\n      <div style={body}>\n        <div style={leftHand}></div>\n        <div style={rightHand}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default CryptoBoyNFTImage;\n","import React, { Component } from \"react\";\nimport CryptoBoyNFTImage from \"../CryptoBoyNFTImage/CryptoBoyNFTImage\";\n\nclass FormAndPreview extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userSelectedColors: [\n        {\n          cardBorderColor: \"\",\n          cardBackgroundColor: \"\",\n          headBorderColor: \"\",\n          headBackgroundColor: \"\",\n          leftEyeBorderColor: \"\",\n          rightEyeBorderColor: \"\",\n          leftEyeBackgroundColor: \"\",\n          rightEyeBackgroundColor: \"\",\n          leftPupilBackgroundColor: \"\",\n          rightPupilBackgroundColor: \"\",\n          mouthColor: \"\",\n          neckBackgroundColor: \"\",\n          neckBorderColor: \"\",\n          bodyBackgroundColor: \"\",\n          bodyBorderColor: \"\",\n        },\n      ],\n      cryptoBoyName: \"\",\n      cryptoBoyPrice: \"\",\n    };\n  }\n\n  componentDidMount = async () => {\n    await this.props.setMintBtnTimer();\n  };\n\n  callMintMyNFTFromApp = (e) => {\n    e.preventDefault();\n    this.props.mintMyNFT(\n      this.state.userSelectedColors[0],\n      this.state.cryptoBoyName,\n      this.state.cryptoBoyPrice\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"card mt-1\">\n          <div className=\"card-body align-items-center d-flex justify-content-center\">\n            <h5>Color Your Crypto Boy As You Want It To be!</h5>\n          </div>\n        </div>\n        <form onSubmit={this.callMintMyNFTFromApp} className=\"pt-4 mt-1\">\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <div className=\"form-group\">\n                <label htmlFor=\"cardBorderColor\">Card Border Color</label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"cardBorderColor\"\n                  id=\"cardBorderColor\"\n                  value={this.state.userSelectedColors[0].cardBorderColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          cardBorderColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"cardBackgroundColor\">\n                  Card Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"cardBackgroundColor\"\n                  id=\"cardBackgroundColor\"\n                  value={this.state.userSelectedColors[0].cardBackgroundColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          cardBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"headBorderColor\">Head Border Color</label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"headBorderColor\"\n                  id=\"headBorderColor\"\n                  value={this.state.userSelectedColors[0].headBorderColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          headBorderColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"headBackgroundColor\">\n                  Head Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"headBackgroundColor\"\n                  id=\"headBackgroundColor\"\n                  value={this.state.userSelectedColors[0].headBackgroundColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          headBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-md-3\">\n              <div className=\"form-group\">\n                <label htmlFor=\"leftEyeBorderColor\">\n                  Left Eye Border Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"leftEyeBorderColor\"\n                  id=\"leftEyeBorderColor\"\n                  value={this.state.userSelectedColors[0].leftEyeBorderColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          leftEyeBorderColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"rightEyeBorderColor\">\n                  Right Eye Border Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"rightEyeBorderColor\"\n                  id=\"rightEyeBorderColor\"\n                  value={this.state.userSelectedColors[0].rightEyeBorderColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          rightEyeBorderColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"leftEyeBackgroundColor\">\n                  Left Eye Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"leftEyeBackgroundColor\"\n                  id=\"leftEyeBackgroundColor\"\n                  value={\n                    this.state.userSelectedColors[0].leftEyeBackgroundColor\n                  }\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          leftEyeBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"rightEyeBackgroundColor\">\n                  Right Eye Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"rightEyeBackgroundColor\"\n                  id=\"rightEyeBackgroundColor\"\n                  value={\n                    this.state.userSelectedColors[0].rightEyeBackgroundColor\n                  }\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          rightEyeBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-md-6 d-flex justify-content-center align-items-center\">\n              <CryptoBoyNFTImage colors={this.state.userSelectedColors[0]} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-md-3\">\n              <div className=\"form-group\">\n                <label htmlFor=\"leftPupilBackgroundColor\">\n                  Left Pupil Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"leftPupilBackgroundColor\"\n                  id=\"leftPupilBackgroundColor\"\n                  value={\n                    this.state.userSelectedColors[0].leftPupilBackgroundColor\n                  }\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          leftPupilBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"rightPupilBackgroundColor\">\n                  Right Pupil Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"rightPupilBackgroundColor\"\n                  id=\"rightPupilBackgroundColor\"\n                  value={\n                    this.state.userSelectedColors[0].rightPupilBackgroundColor\n                  }\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          rightPupilBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"mouthColor\">Mouth Color</label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"mouthColor\"\n                  id=\"mouthColor\"\n                  value={this.state.userSelectedColors[0].mouthColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          mouthColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"neckBackgroundColor\">\n                  Neck Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"neckBackgroundColor\"\n                  id=\"neckBackgroundColor\"\n                  value={this.state.userSelectedColors[0].neckBackgroundColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          neckBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-md-3\">\n              <div className=\"form-group\">\n                <label htmlFor=\"neckBorderColor\">Neck Border Color</label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"neckBorderColor\"\n                  id=\"neckBorderColor\"\n                  value={this.state.userSelectedColors[0].neckBorderColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          neckBorderColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"bodyBackgroundColor\">\n                  Body Background Color\n                </label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"bodyBackgroundColor\"\n                  id=\"bodyBackgroundColor\"\n                  value={this.state.userSelectedColors[0].bodyBackgroundColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          bodyBackgroundColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"bodyBorderColor\">Body Border Color</label>\n                <input\n                  required\n                  type=\"color\"\n                  name=\"bodyBorderColor\"\n                  id=\"bodyBorderColor\"\n                  value={this.state.userSelectedColors[0].bodyBorderColor}\n                  className=\"form-control\"\n                  onChange={(e) =>\n                    this.setState({\n                      userSelectedColors: [\n                        {\n                          ...this.state.userSelectedColors[0],\n                          bodyBorderColor: e.target.value,\n                        },\n                      ],\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-md-6\">\n              <div className=\"form-group\">\n                <label htmlFor=\"cryptoBoyName\">Name</label>\n                <input\n                  required\n                  type=\"text\"\n                  value={this.state.cryptoBoyName}\n                  className=\"form-control\"\n                  placeholder=\"Enter Your Crypto Boy's Name\"\n                  onChange={(e) =>\n                    this.setState({ cryptoBoyName: e.target.value })\n                  }\n                />\n              </div>\n              <div>\n                <label htmlFor=\"price\">Price</label>\n                <input\n                  required\n                  type=\"number\"\n                  name=\"price\"\n                  id=\"cryptoBoyPrice\"\n                  value={this.state.cryptoBoyPrice}\n                  className=\"form-control\"\n                  placeholder=\"Enter Price In Ξ\"\n                  onChange={(e) =>\n                    this.setState({ cryptoBoyPrice: e.target.value })\n                  }\n                />\n              </div>\n              <button\n                id=\"mintBtn\"\n                style={{ fontSize: \"0.9rem\", letterSpacing: \"0.14rem\" }}\n                type=\"submit\"\n                className=\"btn mt-4 btn-block btn-outline-primary\"\n              >\n                Mint My Crypto Boy\n              </button>\n              <div className=\"mt-4\">\n                {this.props.nameIsUsed ? (\n                  <div className=\"alert alert-danger alert-dissmissible\">\n                    <button\n                      type=\"button\"\n                      className=\"close\"\n                      data-dismiss=\"alert\"\n                    >\n                      <span>&times;</span>\n                    </button>\n                    <strong>This name is taken!</strong>\n                  </div>\n                ) : this.props.colorIsUsed ? (\n                  <>\n                    <div className=\"alert alert-danger alert-dissmissible\">\n                      <button\n                        type=\"button\"\n                        className=\"close\"\n                        data-dismiss=\"alert\"\n                      >\n                        <span>&times;</span>\n                      </button>\n                      {this.props.colorsUsed.length > 1 ? (\n                        <strong>These colors are taken!</strong>\n                      ) : (\n                        <strong>This color is taken!</strong>\n                      )}\n                    </div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexWrap: \"wrap\",\n                        marginTop: \"1rem\",\n                        marginBottom: \"3rem\",\n                      }}\n                    >\n                      {this.props.colorsUsed.map((color, index) => (\n                        <div\n                          key={index}\n                          style={{\n                            background: `${color}`,\n                            width: \"50%\",\n                            height: \"50px\",\n                          }}\n                        ></div>\n                      ))}\n                    </div>\n                  </>\n                ) : null}\n              </div>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default FormAndPreview;\n","import React, { Component } from \"react\";\n\nclass CryptoBoyNFTDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newCryptoBoyPrice: \"\",\n    };\n  }\n\n  callChangeTokenPriceFromApp = (tokenId, newPrice) => {\n    this.props.changeTokenPrice(tokenId, newPrice);\n  };\n\n  render() {\n    return (\n      <div key={this.props.cryptoboy.tokenId.toNumber()} className=\"mt-4\">\n        <div className=\"container d-flex justify-content-center g-5\">\n        <p className=\"mr-5\">\n          <span className=\"font-weight-bold\">Token Id</span>:\n          {this.props.cryptoboy.tokenId.toNumber()}\n        </p>\n        \n        <p>\n          <span className=\"font-weight-bold \">Base Price: $100 </span>\n          {/* {this.props.cryptoboy.tokenName} */}\n        </p>\n        </div>\n        <p>\n          <span className=\"font-weight-bold\">Latest Price: $250 </span> \n          {/* {this.props.cryptoboy.tokenName} */}\n        </p>\n        {/* <p>\n          <span className=\"font-weight-bold\">Minted By</span> :{\" \"}\n          {this.props.cryptoboy.mintedBy.substr(0, 5) +\n            \"...\" +\n            this.props.cryptoboy.mintedBy.slice(\n              this.props.cryptoboy.mintedBy.length - 5\n            )}\n        </p>\n        <p>\n          <span className=\"font-weight-bold\">Owned By</span> :{\" \"}\n          {this.props.cryptoboy.currentOwner.substr(0, 5) +\n            \"...\" +\n            this.props.cryptoboy.currentOwner.slice(\n              this.props.cryptoboy.currentOwner.length - 5\n            )}\n        </p>\n        <p>\n          <span className=\"font-weight-bold\">Previous Owner</span> :{\" \"}\n          {this.props.cryptoboy.previousOwner.substr(0, 5) +\n            \"...\" +\n            this.props.cryptoboy.previousOwner.slice(\n              this.props.cryptoboy.previousOwner.length - 5\n            )}\n        </p>\n        <p>\n          <span className=\"font-weight-bold\">Price</span> :{\" \"}\n          {window.web3.utils.fromWei(\n            this.props.cryptoboy.price.toString(),\n            \"Ether\"\n          )}{\" \"}\n          Ξ\n        </p>\n        <p>\n          <span className=\"font-weight-bold\">No. of Transfers</span> :{\" \"}\n          {this.props.cryptoboy.numberOfTransfers.toNumber()}\n        </p> */}\n        <div>\n          {this.props.accountAddress === this.props.cryptoboy.currentOwner ? (\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                this.callChangeTokenPriceFromApp(\n                  this.props.cryptoboy.tokenId.toNumber(),\n                  this.state.newCryptoBoyPrice\n                );\n              }}\n            >\n              <div className=\"form-group mt-4 \">\n                <label htmlFor=\"newCryptoBoyPrice\">\n                  <span className=\"font-weight-bold\">Change Token Price</span> :\n                </label>{\" \"}\n                <input\n                  required\n                  type=\"number\"\n                  name=\"newCryptoBoyPrice\"\n                  id=\"newCryptoBoyPrice\"\n                  value={this.state.newCryptoBoyPrice}\n                  className=\"form-control w-50\"\n                  placeholder=\"Enter new price\"\n                  onChange={(e) =>\n                    this.setState({\n                      newCryptoBoyPrice: e.target.value,\n                    })\n                  }\n                />\n              </div>\n              <button\n                type=\"submit\"\n                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                className=\"btn btn-outline-info mt-0 w-50\"\n              >\n                change price\n              </button>\n            </form>\n          ) : null}\n        </div>\n        <div>\n          {this.props.accountAddress === this.props.cryptoboy.currentOwner ? (\n            this.props.cryptoboy.forSale ? (\n              <button\n                className=\"btn btn-outline-danger mt-4 w-50\"\n                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                onClick={() =>\n                  this.props.toggleForSale(\n                    this.props.cryptoboy.tokenId.toNumber()\n                  )\n                }\n              >\n                Remove from sale\n              </button>\n            ) : (\n              <button\n                className=\"btn btn-outline-success mt-4 w-50\"\n                style={{ fontSize: \"0.8rem\", letterSpacing: \"0.14rem\" }}\n                onClick={() =>\n                  this.props.toggleForSale(\n                    this.props.cryptoboy.tokenId.toNumber()\n                  )\n                }\n              >\n                Keep for sale\n              </button>\n            )\n          ) : null}\n        </div>\n        <div>\n          {this.props.accountAddress !== this.props.cryptoboy.currentOwner ? (\n            this.props.cryptoboy.forSale ? (\n              <button\n                className=\"buy-btn\"\n                value={this.props.cryptoboy.price}\n               \n                onClick={(e) =>\n                  this.props.buyCryptoBoy(\n                    this.props.cryptoboy.tokenId.toNumber(),\n                    e.target.value\n                  )\n                }\n              >\n                Buy \n                {/* {window.web3.utils.fromWei(\n                  this.props.cryptoboy.price.toString(),\n                  \"Ether\"\n                )}{\" \"} */}\n                \n              </button>\n            ) : (\n              <>\n                <button\n                 \n                  \n                  className=\" buy-btn\"\n                >\n                  Buy \n                  {/* {window.web3.utils.fromWei(\n                    this.props.cryptoboy.price.toString(),\n                    \"Ether\"\n                  )}{\" \"} */}\n                  \n                </button>\n                {/* <p className=\"mt-2\">Currently not for sale!</p> */}\n              </>\n            )\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CryptoBoyNFTDetails;\n","const images = [\"https://ipfs.io/ipfs/QmbzUmTyB8X1ZrwGdRe6heUyrKvRUcbBqrmiF8s2qWB7jD?filename=1.jpg\",\n                \"https://ipfs.io/ipfs/QmaAF6zuGziNG4WcdCWiXGioysq4Ku4jcG9Rj3dVBwnr4E?filename=2.jpg\",\n            \"https://ipfs.io/ipfs/QmcgzD5EuX2NcUVA1tMu59uwyZ9pEWLMinwnd8QgGvfWvr?filename=3.jpg\",\n            \"https://ipfs.io/ipfs/Qmb4tCZQnCFm7HKgmePCo8w8CTgC2W6z5W1Vy7GDTUqSjM?filename=4.jpg\",\n            \"https://ipfs.io/ipfs/Qmemf2CnYNgjskX87c4WrLsbyCqjXtriU8JaSvicm1MRUZ?filename=5.jpg\",\n            \"https://ipfs.io/ipfs/QmcyhbBXaxdefxGyPzp7cS2FT39bqKHRkstq7SysbndSA1?filename=6.jpg\",\n            \"https://ipfs.io/ipfs/QmSSUM5pYbgCpeybfGhuKQKTD1fAj2cJQVhFduDkbsa5gQ?filename=7.jpg\",\n            \"https://ipfs.io/ipfs/QmbaahH4s42dodqTWZRjXgt6JURWtBvY9dqZn2j4RsXj8v?filename=8.jpg\",\n            \"https://ipfs.io/ipfs/QmZVvSNxXRnYXq3MChkah74Bt7VaSZRUhLNzZjP4bpGeTK?filename=9.jpg\",\n            \"https://ipfs.io/ipfs/QmZUDmMGmGYaevKzGYtZhmsjQdabc878t8PzEwco6M68QB?filename=10.jpg\",\n            \"https://ipfs.io/ipfs/QmYFgf7Kgf4r3uH11xgzN97bCFUmcqT5Yr2kNiJE9SpnNq?filename=11.jpg\",\n            \"https://ipfs.io/ipfs/QmRMDcv78sz5y6F7UGnT8DLC6ZTi5e3vuikgH1mrvbQsjH?filename=12.jpg\",\n            \"https://ipfs.io/ipfs/QmYppUMGF3BLqhhV5Cm1PTj9Uq781xffaePKStqbYqUTNt?filename=13.jpg\",\n            \"https://ipfs.io/ipfs/QmNULc3QUX6TAv1DnxE5b7pVxicSZjX7jTpYsWb3qfZoFK?filename=1%20(1).jpg\",\n            \"https://ipfs.io/ipfs/Qmca49VFgA3Yx4zvui3AqyKrJFkWN2cnPpWxdwcu66wc1u?filename=2.jpg\",\n            \"https://ipfs.io/ipfs/QmXaG26Baipr791xuxEGP6Q4X84YQZctQjCR82GVjVDnYd?filename=3.jpg\",\n            \"https://ipfs.io/ipfs/QmcqxC3ZNDx9GkyqZqCA6SqnBT7s2onLh2JwgznmjX9xBZ?filename=4.jpg\",\n            \"https://ipfs.io/ipfs/QmPnZr6U4vkSR4TPvRbg1E95kUV8ozBky1XTuRR5BP8Qqh?filename=5.jpg\",\n            \"https://ipfs.io/ipfs/QmSE2M3RjXryrnuPrxnaTD7FcxTAGxznKZB7UBgGuB91Za?filename=6.jpg\",\n            \"https://ipfs.io/ipfs/QmchUQQra1YwQGwdLbb8hDab9RQ7AS9YxEoZSGGs3XH8V6?filename=7.jpg\",\n            \"https://ipfs.io/ipfs/QmSomhumM5JtSywyarqqGzbqzYjAEHfBD3fLAiChaCxhjG?filename=8.jpg\",\n            \"https://ipfs.io/ipfs/QmUd2f5eFvtEBQjyKRqNEGbwo7tNKAV1dWBW6wCP4XwTYX?filename=9.jpg\",\n            \"https://ipfs.io/ipfs/QmQ9wSJ8Baj3sYjasVu9z4gRU66otHP7CzSwAXHRSWrreU?filename=10.jpg\"]\nexport default images","/* eslint-disable */\n\n\nimport React, { useState, useEffect } from \"react\";\n\n\nimport CryptoBoyNFTImage from \"../CryptoBoyNFTImage/CryptoBoyNFTImage\";\nimport CryptoBoyNFTDetails from \"../CryptoBoyNFTDetails/CryptoBoyNFTDetails\";\nimport Loading from \"../Loading/Loading\";\nimport image from './nftimage'\nimport styled from \"styled-components\";\nimport icon from \"./favicon.ico\";\n\nconst AllCryptoBoys = ({\n  cryptoBoys,\n  accountAddress,\n  totalTokensMinted,\n  changeTokenPrice,\n  toggleForSale,\n  buyCryptoBoy,\n}) => {\n  const [loading, setLoading] = useState(true);\n\n  const NavHomeButton = styled.button`\n  padding: 10px;\n  border-radius: 20px;\n  text-decoration: none;\n  background-color: #2d6145;\n  border: none;\n  font-size: 15px;\n  width: 100px;\n  color: white;\n  `\n  // useEffect(() => {\n  //   if (cryptoBoys.length !== 0) {\n  //     if (cryptoBoys[0].metaData !== undefined) {\n  //       setLoading(true);\n  //     } else {\n  //       setLoading(true);\n  //     }\n  //   }\n  // }, [cryptoBoys]);\n  \n console.log(\"length\",cryptoBoys.length)\n  return (\n    <div>\n      <div className=\"nav-bar\">\n        <div className=\"card-body align-items-center d-flex container flex-wrap justify-content-center\">\n          <h1 className=\"flex-grow-1\">\n            NFT Marketplace\n          </h1>\n          <div className=\"nft-marketplace-btn flex-wrap\">\n          <button className=\"auction-btn\">Auction</button>\n          <button className=\"market-btn\">Market</button>\n          <button className=\"sellnft-btn\">Sell NFT</button>\n          <NavHomeButton> <a href=\"https://fomobaby.app/\" style={{color:\"white\"}}>Home</a> </NavHomeButton>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"d-flex flex-wrap mb-2 parant-nft-boys\" style={{backgroundColor:\"violet\"}}>\n        {cryptoBoys.map((cryptoboy) => {\n          return (\n            <div className=\"nft-boys\">\n              <img className=\"nftimages\" src={image[cryptoBoys.indexOf(cryptoboy)]} alt=\"nftfomo\"/>\n                {/* <CryptoBoyNFTImage\n                  colors={\n                    cryptoboy.metaData !== undefined\n                      ? cryptoboy.metaData.metaData.colors\n                      : \"\"\n                  }\n                /> */}\n             \n              <CryptoBoyNFTDetails\n                cryptoboy={cryptoboy}\n                accountAddress={accountAddress}\n                changeTokenPrice={changeTokenPrice}\n                toggleForSale={toggleForSale}\n                buyCryptoBoy={buyCryptoBoy}\n              />\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default AllCryptoBoys;\n","import React from \"react\";\n\nconst ContractNotDeployed = () => {\n  return (\n    <div className=\"jumbotron\">\n      <h3>Crypto Boys Contract Not Deployed To This Network.</h3>\n      <hr className=\"my-4\" />\n      <p className=\"lead\">\n        Connect Metamask to Kovan Testnet Or Localhost 7545 running a custom RPC\n        like Ganache.\n      </p>\n    </div>\n  );\n};\n\nexport default ContractNotDeployed;\n","import React from \"react\";\nimport metamaskIcon from \"./metamask.svg\";\n\nconst ConnectToMetamask = ({ connectToMetamask }) => {\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"display-5\">\n        CryptoBoy NFT Marketplace\n      </h1>\n      <p className=\"lead\">\n        This is an NFT marketplace where you can mint your ERC721 implemented{\" \"}\n        <i>Crypto Boy NFTs</i> and manage them.\n      </p>\n      <hr className=\"my-4\" />\n      <button\n        onClick={connectToMetamask}\n        className=\"btn btn-primary d-flex align-items-center\"\n        style={{ fontSize: \"0.9rem\", letterSpacing: \"0.14rem\" }}\n      >\n        Connect Metamask{\" \"}\n        <img\n          src={metamaskIcon}\n          alt=\"metamask-icon\"\n          style={{ width: \"2rem\", marginLeft: \"0.5rem\" }}\n        />\n      </button>\n    </div>\n  );\n};\n\nexport default ConnectToMetamask;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Web3 from \"web3\";\nimport CryptoBoys from \"../abis/CryptoBoys.json\";\n/* eslint-disable */\n\nimport FormAndPreview from \"../components/FormAndPreview/FormAndPreview\";\nimport AllCryptoBoys from \"./AllCryptoBoys/AllCryptoBoys\";\nimport AccountDetails from \"./AccountDetails/AccountDetails\";\nimport ContractNotDeployed from \"./ContractNotDeployed/ContractNotDeployed\";\nimport ConnectToMetamask from \"./ConnectMetamask/ConnectToMetamask\";\nimport Loading from \"./Loading/Loading\";\n\nimport Navbar from \"./Navbar/Navbar\";\nimport MyCryptoBoys from \"./MyCryptoBoys/MyCryptoBoys\";\nimport Queries from \"./Queries/Queries\";\n\nconst ipfsClient = require(\"ipfs-http-client\");\nconst ipfs = ipfsClient({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\",\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountAddress: \"\",\n      accountBalance: \"\",\n      cryptoBoysContract: null,\n      cryptoBoysCount: 0,\n      cryptoBoys: [],\n      loading: true,\n      metamaskConnected: false,\n      contractDetected: false,\n      totalTokensMinted: 0,\n      totalTokensOwnedByAccount: 0,\n      nameIsUsed: false,\n      colorIsUsed: false,\n      colorsUsed: [],\n      lastMintTime: null,\n    };\n  }\n\n  componentWillMount = async () => {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    await this.setMetaData();\n    await this.setMintBtnTimer();\n  };\n\n  setMintBtnTimer = () => {\n    const mintBtn = document.getElementById(\"mintBtn\");\n    if (mintBtn !== undefined && mintBtn !== null) {\n      this.setState({\n        lastMintTime: localStorage.getItem(this.state.accountAddress),\n      });\n      this.state.lastMintTime === undefined || this.state.lastMintTime === null\n        ? (mintBtn.innerHTML = \"Mint My Crypto Boy\")\n        : this.checkIfCanMint(parseInt(this.state.lastMintTime));\n    }\n  };\n\n  checkIfCanMint = (lastMintTime) => {\n    const mintBtn = document.getElementById(\"mintBtn\");\n    const timeGap = 300000; //5min in milliseconds\n    const countDownTime = lastMintTime + timeGap;\n    const interval = setInterval(() => {\n      const now = new Date().getTime();\n      const diff = countDownTime - now;\n      if (diff < 0) {\n        mintBtn.removeAttribute(\"disabled\");\n        mintBtn.innerHTML = \"Mint My Crypto Boy\";\n        localStorage.removeItem(this.state.accountAddress);\n        clearInterval(interval);\n      } else {\n        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((diff % (1000 * 60)) / 1000);\n        mintBtn.setAttribute(\"disabled\", true);\n        mintBtn.innerHTML = `Next mint in ${minutes}m ${seconds}s`;\n      }\n    }, 1000);\n  };\n\n  loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n\n  loadBlockchainData = async () => {\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    if (accounts.length === 0) {\n      this.setState({ metamaskConnected: false });\n    } else {\n      this.setState({ metamaskConnected: true });\n      this.setState({ loading: true });\n      this.setState({ accountAddress: accounts[0] });\n      let accountBalance = await web3.eth.getBalance(accounts[0]);\n      accountBalance = web3.utils.fromWei(accountBalance, \"Ether\");\n      this.setState({ accountBalance });\n      this.setState({ loading: false });\n      const networkId = await web3.eth.net.getId();\n      const networkData = CryptoBoys.networks[networkId];\n      if (networkData) {\n        this.setState({ loading: true });\n        const cryptoBoysContract = web3.eth.Contract(\n          CryptoBoys.abi,\n          networkData.address\n        );\n        this.setState({ cryptoBoysContract });\n        this.setState({ contractDetected: true });\n        const cryptoBoysCount = await cryptoBoysContract.methods\n          .cryptoBoyCounter()\n          .call();\n        this.setState({ cryptoBoysCount });\n        for (var i = 1; i <= cryptoBoysCount; i++) {\n          const cryptoBoy = await cryptoBoysContract.methods\n            .allCryptoBoys(i)\n            .call();\n          this.setState({\n            cryptoBoys: [...this.state.cryptoBoys, cryptoBoy],\n          });\n        }\n        let totalTokensMinted = await cryptoBoysContract.methods\n          .getNumberOfTokensMinted()\n          .call();\n        totalTokensMinted = totalTokensMinted.toNumber();\n        this.setState({ totalTokensMinted });\n        let totalTokensOwnedByAccount = await cryptoBoysContract.methods\n          .getTotalNumberOfTokensOwnedByAnAddress(this.state.accountAddress)\n          .call();\n        totalTokensOwnedByAccount = totalTokensOwnedByAccount.toNumber();\n        this.setState({ totalTokensOwnedByAccount });\n        this.setState({ loading: false });\n      } else {\n        this.setState({ contractDetected: false });\n      }\n    }\n  };\n\n  connectToMetamask = async () => {\n    await window.ethereum.enable();\n    this.setState({ metamaskConnected: true });\n    window.location.reload();\n  };\n\n  setMetaData = async () => {\n    if (this.state.cryptoBoys.length !== 0) {\n      this.state.cryptoBoys.map(async (cryptoboy) => {\n        const result = await fetch(cryptoboy.tokenURI);\n        const metaData = await result.json();\n        this.setState({\n          cryptoBoys: this.state.cryptoBoys.map((cryptoboy) =>\n            cryptoboy.tokenId.toNumber() === Number(metaData.tokenId)\n              ? {\n                  ...cryptoboy,\n                  metaData,\n                }\n              : cryptoboy\n          ),\n        });\n      });\n    }\n  };\n\n  mintMyNFT = async (colors, name, tokenPrice) => {\n    this.setState({ loading: true });\n    const colorsArray = Object.values(colors);\n    let colorsUsed = [];\n    for (let i = 0; i < colorsArray.length; i++) {\n      if (colorsArray[i] !== \"\") {\n        let colorIsUsed = await this.state.cryptoBoysContract.methods\n          .colorExists(colorsArray[i])\n          .call();\n        if (colorIsUsed) {\n          colorsUsed = [...colorsUsed, colorsArray[i]];\n        } else {\n          continue;\n        }\n      }\n    }\n    const nameIsUsed = await this.state.cryptoBoysContract.methods\n      .tokenNameExists(name)\n      .call();\n    if (colorsUsed.length === 0 && !nameIsUsed) {\n      const {\n        cardBorderColor,\n        cardBackgroundColor,\n        headBorderColor,\n        headBackgroundColor,\n        leftEyeBorderColor,\n        rightEyeBorderColor,\n        leftEyeBackgroundColor,\n        rightEyeBackgroundColor,\n        leftPupilBackgroundColor,\n        rightPupilBackgroundColor,\n        mouthColor,\n        neckBackgroundColor,\n        neckBorderColor,\n        bodyBackgroundColor,\n        bodyBorderColor,\n      } = colors;\n      let previousTokenId;\n      previousTokenId = await this.state.cryptoBoysContract.methods\n        .cryptoBoyCounter()\n        .call();\n      previousTokenId = previousTokenId.toNumber();\n      const tokenId = previousTokenId + 1;\n      const tokenObject = {\n        tokenName: \"Crypto Boy\",\n        tokenSymbol: \"CB\",\n        tokenId: `${tokenId}`,\n        name: name,\n        metaData: {\n          type: \"color\",\n          colors: {\n            cardBorderColor,\n            cardBackgroundColor,\n            headBorderColor,\n            headBackgroundColor,\n            leftEyeBorderColor,\n            rightEyeBorderColor,\n            leftEyeBackgroundColor,\n            rightEyeBackgroundColor,\n            leftPupilBackgroundColor,\n            rightPupilBackgroundColor,\n            mouthColor,\n            neckBackgroundColor,\n            neckBorderColor,\n            bodyBackgroundColor,\n            bodyBorderColor,\n          },\n        },\n      };\n      const cid = await ipfs.add(JSON.stringify(tokenObject));\n      let tokenURI = `https://ipfs.infura.io/ipfs/${cid.path}`;\n      const price = window.web3.utils.toWei(tokenPrice.toString(), \"Ether\");\n      this.state.cryptoBoysContract.methods\n        .mintCryptoBoy(name, tokenURI, price, colorsArray)\n        .send({ from: this.state.accountAddress })\n        .on(\"confirmation\", () => {\n          localStorage.setItem(this.state.accountAddress, new Date().getTime());\n          this.setState({ loading: false });\n          window.location.reload();\n        });\n    } else {\n      if (nameIsUsed) {\n        this.setState({ nameIsUsed: true });\n        this.setState({ loading: false });\n      } else if (colorsUsed.length !== 0) {\n        this.setState({ colorIsUsed: true });\n        this.setState({ colorsUsed });\n        this.setState({ loading: false });\n      }\n    }\n  };\n\n  toggleForSale = (tokenId) => {\n    this.setState({ loading: true });\n    this.state.cryptoBoysContract.methods\n      .toggleForSale(tokenId)\n      .send({ from: this.state.accountAddress })\n      .on(\"confirmation\", () => {\n        this.setState({ loading: false });\n        window.location.reload();\n      });\n  };\n\n  changeTokenPrice = (tokenId, newPrice) => {\n    this.setState({ loading: true });\n    const newTokenPrice = window.web3.utils.toWei(newPrice, \"Ether\");\n    this.state.cryptoBoysContract.methods\n      .changeTokenPrice(tokenId, newTokenPrice)\n      .send({ from: this.state.accountAddress })\n      .on(\"confirmation\", () => {\n        this.setState({ loading: false });\n        window.location.reload();\n      });\n  };\n\n  buyCryptoBoy = (tokenId, price) => {\n    this.setState({ loading: true });\n    this.state.cryptoBoysContract.methods\n      .buyToken(tokenId)\n      .send({ from: this.state.accountAddress, value: price })\n      .on(\"confirmation\", () => {\n        this.setState({ loading: false });\n        window.location.reload();\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        {!this.state.metamaskConnected ? (\n          <ConnectToMetamask connectToMetamask={this.connectToMetamask} />\n        ) : !this.state.contractDetected ? (\n          <ContractNotDeployed />\n        ) : false ? (\n          <Loading />\n        ) : (\n          <>\n            <HashRouter basename=\"/\">\n              {/* <Navbar /> */}\n              {/* <Route\n                path=\"/\"\n                exact\n                render={() => (\n                  <AccountDetails\n                    accountAddress={this.state.accountAddress}\n                    accountBalance={this.state.accountBalance}\n                  />\n                )}\n              />\n              <Route\n                path=\"/mint\"\n                render={() => (\n                  <FormAndPreview\n                    mintMyNFT={this.mintMyNFT}\n                    nameIsUsed={this.state.nameIsUsed}\n                    colorIsUsed={this.state.colorIsUsed}\n                    colorsUsed={this.state.colorsUsed}\n                    setMintBtnTimer={this.setMintBtnTimer}\n                  />\n                )}\n              /> */}\n              \n              <Route\n                path=\"/\"\n                render={() => (\n                  \n                  <AllCryptoBoys\n                    accountAddress={this.state.accountAddress}\n                    cryptoBoys={this.state.cryptoBoys}\n                    totalTokensMinted={this.state.totalTokensMinted}\n                    changeTokenPrice={this.changeTokenPrice}\n                    toggleForSale={this.toggleForSale}\n                    buyCryptoBoy={this.buyCryptoBoy}\n                  />\n                )}\n              />\n              {/* <Route\n                path=\"/my-tokens\"\n                render={() => (\n                  <MyCryptoBoys\n                    accountAddress={this.state.accountAddress}\n                    cryptoBoys={this.state.cryptoBoys}\n                    totalTokensOwnedByAccount={\n                      this.state.totalTokensOwnedByAccount\n                    }\n                  />\n                )}\n              />\n              <Route\n                path=\"/queries\"\n                render={() => (\n                  <Queries cryptoBoysContract={this.state.cryptoBoysContract} />\n                )}\n              /> */}\n            </HashRouter>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}